plot <- ggplot(data = cm, mapping = aes(x = ordered(True, c(1, 0)), y = Predicted, fill = Predicted_pct)) +
geom_tile() +
geom_text(aes(label = round(Predicted_pct, 2)), color = 'white') +
scale_fill_gradient(low = "blue", high = "red", name = "Rel. Freq.") +
xlab("True") +
ylab("Predicted") +
labs(title = title) +
theme_minimal()
# print plot
print(plot)
}
# plot confusion matrix for logistic regression with all variables
generate_cm(y_test, logit_y_hat, "Confusion Matrix for Logistic Regression")
# compute ROC and AUC
logit_roc <- roc(response = y_test, predictor = logit_predict, quiet = TRUE)
logit_auc <- round(auc(logit_roc), 4)
cat("AUC for the logit model", logit_auc, "\n")
# Install and load required packages
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load(readxl, dplyr, ggplot2, knitr, lubridate, tidyr, sf, httr, caret, glmnet, stringr, remotes, RColorBrewer, viridis, scales, classInt, forcats, pROC, randomForest)
# get raw content of the file
response <- GET("https://raw.githubusercontent.com/rrachelkane/data-science-group-project/main/data/sqf-2023.xlsx")
# retrieve the .xlsx file
if (status_code(response) == 200) {
# create a temporary file to save the downloaded content
temp_file <- tempfile(fileext = ".xlsx")
# Write the raw content to the temporary file
writeBin(content(response, "raw"), temp_file)
# Read the Excel file from the temporary file
sqf_data <- read_xlsx(temp_file)
# View the first few rows of the data
head(sqf_data)
} else {
stop("Failed to download the file.")
}
# check original dimensions
dim(sqf_data)
# view head
head(sqf_data)
colnames(sqf_data) <- tolower(colnames(sqf_data))
# check
colnames(sqf_data)[1:3]
sqf_data <- sqf_data %>%
select(- c("stop_frisk_date", "record_status_code", "supervising_action_corresponding_activity_log_entry_reviewed", "stop_location_sector_code", "stop_location_apartment", "stop_location_full_address", "stop_location_patrol_boro_name", "stop_location_street_name", "suspect_other_description", "observed_duration_minutes", "stop_duration_minutes", "summons_issued_flag", "supervising_officer_command_code", "issuing_officer_command_code", "stop_location_precinct", "year2", "suspect_arrest_offense"))
# check new dim
dim(sqf_data)
na_cols <- colMeans(is.na(sqf_data)) * 100
na_cols[na_cols > 0]
sqf_data[1:5, "demeanor_of_person_stopped"]
# drop
sqf_data <- sqf_data %>%
select(-("demeanor_of_person_stopped"))
# check new dim
dim(sqf_data)
# get % of nulls, in columns with at least one null
null_cols <- (colMeans(sqf_data == "(null)") * 100)[colMeans(sqf_data == "(null)") * 100 > 0]
# make df for plot
null_cols_df <- data.frame(Feature = names(null_cols), Percentage = null_cols)
dim(null_cols_df)
# order for plot
null_cols_df$Feature <- factor(null_cols_df$Feature,
levels = null_cols_df$Feature[order(null_cols_df$Percentage, decreasing = FALSE)])
# plot
ggplot(null_cols_df, aes(x = Feature, y = Percentage)) +
geom_bar(stat = "identity", fill = "lightblue", color = "darkblue") +
labs(title = "Percentage of (null) Values per Column",
x = "Columns",
y = "Percentage of (null) Values") +
coord_flip() +  # Flip coordinates
theme_minimal()
sqf_data %>%
group_by(ask_for_consent_flg) %>%
summarise(N = n()) %>%
kable()
print(unique(sqf_data$firearm_flag))
sqf_data %>%
group_by(weapon_found_flag, firearm_flag) %>%
summarise(N = n()) %>%
kable()
# note that for the identifying variables related to cops, "yes" entries are indicated unusually
print(unique(sqf_data$id_card_identifies_officer_flag))
print(unique(sqf_data$verbal_identifies_officer_flag))
print(unique(sqf_data$shield_identifies_officer_flag))
# initialize empty vector
null_2 <- c()
# loop through columns
# loop through columns
for (col in names(sqf_data)) {
# Get unique values of the column
unique_values <- unique(sqf_data[[col]])
# Check if unique values are exactly a subset of "Y", "I", "V", "S", and "(null)"
if (all(unique_values %in% c("Y", "I", "V", "S", "(null)")) && length(unique_values) == 2) {
null_2 <- c(null_2, col)  # Add column name to null_2
}
}
# check n of type 2 nulls
length(null_2)
# pre-clean check examples
print(unique(sqf_data$firearm_flag))
print(unique(sqf_data$id_card_identifies_officer_flag))
# replace these nulls with Ns
sqf_data <- sqf_data %>%
mutate(across(all_of(null_2), ~ ifelse(. == "(null)", "N", .)))
# post-clean check examples
print(unique(sqf_data$firearm_flag))
print(unique(sqf_data$id_card_identifies_officer_flag))
# initialize empty vector
null_1 <- c()
# loop through columns
for (col in names(sqf_data)) {
# for columns not in null_2
if (!(col %in% null_2)) {
# if "(null)" is present in the column
if ("(null)" %in% sqf_data[[col]]) {
null_1 <- c(null_1, col)  # add column name to the vector
}
}
}
# check length
length(null_1)
# pre-clean check
print(unique(sqf_data$ask_for_consent_flg))
# replace these with NAs
sqf_data <- sqf_data %>%
mutate(across(all_of(null_1), ~ ifelse(. == "(null)", NA, .)))
# post-clean check
print(unique(sqf_data$ask_for_consent_flg))
# get % of NAs, in columns with at least one NA
na_cols <- (colMeans(is.na(sqf_data)) * 100)[colMeans(is.na(sqf_data)) * 100 > 0]
# make df for plot
na_cols_df <- data.frame(Feature = names(na_cols), Percentage = na_cols)
# order for plot
na_cols_df$Feature <- factor(na_cols_df$Feature,
levels = na_cols_df$Feature[order(na_cols_df$Percentage, decreasing = FALSE)])
# plot
ggplot(na_cols_df, aes(x = Feature, y = Percentage)) +
geom_bar(stat = "identity", fill = "#F8566D", color = "black") +
labs(title = "Percentage of NA Values per Column",
x = "Columns",
y = "Percentage of NA Values") +
coord_flip() +  # Flip coordinates
theme_minimal()
sqf_data <- sqf_data %>%
select(-all_of(names(na_cols[na_cols > 25])))
dim(sqf_data)
sqf_data <- sqf_data %>%
filter(!if_any(everything(), is.na))
dim(sqf_data)
# pre check
print(unique(sqf_data$firearm_flag))
print(unique(sqf_data$id_card_identifies_officer_flag))
# clean Ys and Ns and set as numeric
sqf_data <- sqf_data %>%
mutate(across(
where(~ all(. %in% c("Y", "N", "I", "V", "S"))),
~ as.numeric(ifelse(. %in% c("Y", "I", "V", "S"), 1, 0))
))
# post check
print(unique(sqf_data$firearm_flag))
print(unique(sqf_data$id_card_identifies_officer_flag))
sqf_data <- sqf_data %>%
mutate(
time_of_day = case_when(
str_extract(stop_frisk_time, "^\\d{2}") %in% c("00", "01", "02", "03", "04", "05") ~ "Late Night",
str_extract(stop_frisk_time, "^\\d{2}") %in% c("06", "07", "08", "09", "10", "11") ~ "Morning",
str_extract(stop_frisk_time, "^\\d{2}") %in% c("12", "13", "14", "15", "16", "17") ~ "Afternoon",
str_extract(stop_frisk_time, "^\\d{2}") %in% c("18", "19", "20", "21", "22", "23") ~ "Evening",
TRUE ~ NA_character_
),
time_of_day = factor(time_of_day, levels = c("Late Night", "Morning", "Afternoon", "Evening"))
)
# check
print(table(sqf_data$time_of_day))
# now drop stop frisk time as we will just use time_of_day
sqf_data <- sqf_data %>%
select(-"stop_frisk_time")
# convert character columns to factors, except for stop location x and y
sqf_data <- sqf_data %>%
mutate(across(
.cols = where(is.character) & !c("stop_location_x", "stop_location_y"),
.fns = as.factor
))
# define convert factor to numeric, handling non-numeric entries
convert_to_numeric <- function(x) {
# convert to character to avoid factor levels issues
x <- as.character(x)
# replace non-numeric values with NA (e.g., "unknown", "760", "7.6")
x <- gsub("[^0-9.]", "", x)
# convert to numeric
as.numeric(x)
}
# apply the function to the relevant columns
sqf_data <- sqf_data %>%
mutate(
suspect_reported_age = convert_to_numeric(suspect_reported_age),
suspect_height = convert_to_numeric(suspect_height),
suspect_weight = convert_to_numeric(suspect_weight)
)
# check to make sure successful
summary(sqf_data$suspect_reported_age)
summary(sqf_data$suspect_height)
summary(sqf_data$suspect_weight)
# Function to convert feet.inches to feet
convert_to_feet <- function(feet_inches) {
# Extract feet (integer part)
feet <- floor(feet_inches)
# Get the fractional part
fractional_part <- feet_inches - feet
# Interpret inches based on the fractional part
if (fractional_part == 0) {
# No fractional part means no additional inches
inches <- 0
} else {
# Convert fractional part to a string to check its length
fractional_str <- as.character(fractional_part)
if (grepl("\\.\\d$", fractional_str)) {
# Case like `.1`: Single digit after decimal -> 1, 2, ..., 9 inches
inches <- fractional_part * 10
} else if (grepl("\\.\\d0$", fractional_str)) {
# Case like `.10`, `.20`, etc.: Two digits ending in `0` -> 10, 20, etc. inches
inches <- fractional_part * 100
} else {
# Case like `.11`, `.12`, etc.: Two digits not ending in `0` -> Exact inches
inches <- fractional_part * 100
}
}
# Validate inches (should be between 0 and 11)
if (inches < 0 || inches > 11.9) {
warning(paste("Invalid height input:", feet_inches, "- Inches must be between 0 and 11.9. Returning NA."))
return(NA) # We have no NAs, so inches were extracted correctly.
}
# Convert inches to feet
inches_in_feet <- inches / 12
# Return total height in feet
return(feet + inches_in_feet)
}
# Apply the conversion function to the 'suspect_height' column
sqf_data$suspect_height_feet <- sapply(sqf_data$suspect_height, convert_to_feet)
# Check the result
tail(sqf_data[, c("suspect_height", "suspect_height_feet")])
sqf_data$suspect_height <- sqf_data$suspect_height_feet
#drop suspect
sqf_data <- sqf_data %>% dplyr::select(-suspect_height_feet)
head(sqf_data)
# Install and load required packages
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load(readxl, dplyr, ggplot2, knitr, lubridate, tidyr, sf, httr, caret, glmnet, stringr, remotes, RColorBrewer, viridis, scales, classInt, forcats, pROC, randomForest)
# get raw content of the file
response <- GET("https://raw.githubusercontent.com/rrachelkane/data-science-group-project/main/data/sqf-2023.xlsx")
# retrieve the .xlsx file
if (status_code(response) == 200) {
# create a temporary file to save the downloaded content
temp_file <- tempfile(fileext = ".xlsx")
# Write the raw content to the temporary file
writeBin(content(response, "raw"), temp_file)
# Read the Excel file from the temporary file
sqf_data <- read_xlsx(temp_file)
# View the first few rows of the data
head(sqf_data)
} else {
stop("Failed to download the file.")
}
# check original dimensions
dim(sqf_data)
# view head
head(sqf_data)
colnames(sqf_data) <- tolower(colnames(sqf_data))
# check
colnames(sqf_data)[1:3]
sqf_data <- sqf_data %>%
select(- c("stop_frisk_date", "record_status_code", "supervising_action_corresponding_activity_log_entry_reviewed", "stop_location_sector_code", "stop_location_apartment", "stop_location_full_address", "stop_location_patrol_boro_name", "stop_location_street_name", "suspect_other_description", "observed_duration_minutes", "stop_duration_minutes", "summons_issued_flag", "supervising_officer_command_code", "issuing_officer_command_code", "stop_location_precinct", "year2", "suspect_arrest_offense"))
# check new dim
dim(sqf_data)
na_cols <- colMeans(is.na(sqf_data)) * 100
na_cols[na_cols > 0]
sqf_data[1:5, "demeanor_of_person_stopped"]
# drop
sqf_data <- sqf_data %>%
select(-("demeanor_of_person_stopped"))
# check new dim
dim(sqf_data)
# get % of nulls, in columns with at least one null
null_cols <- (colMeans(sqf_data == "(null)") * 100)[colMeans(sqf_data == "(null)") * 100 > 0]
# make df for plot
null_cols_df <- data.frame(Feature = names(null_cols), Percentage = null_cols)
dim(null_cols_df)
# order for plot
null_cols_df$Feature <- factor(null_cols_df$Feature,
levels = null_cols_df$Feature[order(null_cols_df$Percentage, decreasing = FALSE)])
# plot
ggplot(null_cols_df, aes(x = Feature, y = Percentage)) +
geom_bar(stat = "identity", fill = "lightblue", color = "darkblue") +
labs(title = "Percentage of (null) Values per Column",
x = "Columns",
y = "Percentage of (null) Values") +
coord_flip() +  # Flip coordinates
theme_minimal()
sqf_data %>%
group_by(ask_for_consent_flg) %>%
summarise(N = n()) %>%
kable()
print(unique(sqf_data$firearm_flag))
sqf_data %>%
group_by(weapon_found_flag, firearm_flag) %>%
summarise(N = n()) %>%
kable()
# note that for the identifying variables related to cops, "yes" entries are indicated unusually
print(unique(sqf_data$id_card_identifies_officer_flag))
print(unique(sqf_data$verbal_identifies_officer_flag))
print(unique(sqf_data$shield_identifies_officer_flag))
# initialize empty vector
null_2 <- c()
# loop through columns
# loop through columns
for (col in names(sqf_data)) {
# Get unique values of the column
unique_values <- unique(sqf_data[[col]])
# Check if unique values are exactly a subset of "Y", "I", "V", "S", and "(null)"
if (all(unique_values %in% c("Y", "I", "V", "S", "(null)")) && length(unique_values) == 2) {
null_2 <- c(null_2, col)  # Add column name to null_2
}
}
# check n of type 2 nulls
length(null_2)
# pre-clean check examples
print(unique(sqf_data$firearm_flag))
print(unique(sqf_data$id_card_identifies_officer_flag))
# replace these nulls with Ns
sqf_data <- sqf_data %>%
mutate(across(all_of(null_2), ~ ifelse(. == "(null)", "N", .)))
# post-clean check examples
print(unique(sqf_data$firearm_flag))
print(unique(sqf_data$id_card_identifies_officer_flag))
# initialize empty vector
null_1 <- c()
# loop through columns
for (col in names(sqf_data)) {
# for columns not in null_2
if (!(col %in% null_2)) {
# if "(null)" is present in the column
if ("(null)" %in% sqf_data[[col]]) {
null_1 <- c(null_1, col)  # add column name to the vector
}
}
}
# check length
length(null_1)
# pre-clean check
print(unique(sqf_data$ask_for_consent_flg))
# replace these with NAs
sqf_data <- sqf_data %>%
mutate(across(all_of(null_1), ~ ifelse(. == "(null)", NA, .)))
# post-clean check
print(unique(sqf_data$ask_for_consent_flg))
# get % of NAs, in columns with at least one NA
na_cols <- (colMeans(is.na(sqf_data)) * 100)[colMeans(is.na(sqf_data)) * 100 > 0]
# make df for plot
na_cols_df <- data.frame(Feature = names(na_cols), Percentage = na_cols)
# order for plot
na_cols_df$Feature <- factor(na_cols_df$Feature,
levels = na_cols_df$Feature[order(na_cols_df$Percentage, decreasing = FALSE)])
# plot
ggplot(na_cols_df, aes(x = Feature, y = Percentage)) +
geom_bar(stat = "identity", fill = "#F8566D", color = "black") +
labs(title = "Percentage of NA Values per Column",
x = "Columns",
y = "Percentage of NA Values") +
coord_flip() +  # Flip coordinates
theme_minimal()
sqf_data <- sqf_data %>%
select(-all_of(names(na_cols[na_cols > 25])))
dim(sqf_data)
sqf_data <- sqf_data %>%
filter(!if_any(everything(), is.na))
dim(sqf_data)
# pre check
print(unique(sqf_data$firearm_flag))
print(unique(sqf_data$id_card_identifies_officer_flag))
# clean Ys and Ns and set as numeric
sqf_data <- sqf_data %>%
mutate(across(
where(~ all(. %in% c("Y", "N", "I", "V", "S"))),
~ as.numeric(ifelse(. %in% c("Y", "I", "V", "S"), 1, 0))
))
# post check
print(unique(sqf_data$firearm_flag))
print(unique(sqf_data$id_card_identifies_officer_flag))
sqf_data <- sqf_data %>%
mutate(
time_of_day = case_when(
str_extract(stop_frisk_time, "^\\d{2}") %in% c("00", "01", "02", "03", "04", "05") ~ "Late Night",
str_extract(stop_frisk_time, "^\\d{2}") %in% c("06", "07", "08", "09", "10", "11") ~ "Morning",
str_extract(stop_frisk_time, "^\\d{2}") %in% c("12", "13", "14", "15", "16", "17") ~ "Afternoon",
str_extract(stop_frisk_time, "^\\d{2}") %in% c("18", "19", "20", "21", "22", "23") ~ "Evening",
TRUE ~ NA_character_
),
time_of_day = factor(time_of_day, levels = c("Late Night", "Morning", "Afternoon", "Evening"))
)
# check
print(table(sqf_data$time_of_day))
# now drop stop frisk time as we will just use time_of_day
sqf_data <- sqf_data %>%
select(-"stop_frisk_time")
# convert character columns to factors, except for stop location x and y
sqf_data <- sqf_data %>%
mutate(across(
.cols = where(is.character) & !c("stop_location_x", "stop_location_y"),
.fns = as.factor
))
# define convert factor to numeric, handling non-numeric entries
convert_to_numeric <- function(x) {
# convert to character to avoid factor levels issues
x <- as.character(x)
# replace non-numeric values with NA (e.g., "unknown", "760", "7.6")
x <- gsub("[^0-9.]", "", x)
# convert to numeric
as.numeric(x)
}
# apply the function to the relevant columns
sqf_data <- sqf_data %>%
mutate(
suspect_reported_age = convert_to_numeric(suspect_reported_age),
suspect_height = convert_to_numeric(suspect_height),
suspect_weight = convert_to_numeric(suspect_weight)
)
# check to make sure successful
summary(sqf_data$suspect_reported_age)
summary(sqf_data$suspect_height)
summary(sqf_data$suspect_weight)
# Function to convert feet.inches to feet
convert_to_feet <- function(feet_inches) {
# Extract feet (integer part)
feet <- floor(feet_inches)
# Get the fractional part
fractional_part <- feet_inches - feet
# Interpret inches based on the fractional part
if (fractional_part == 0) {
# No fractional part means no additional inches
inches <- 0
} else {
# Convert fractional part to a string to check its length
fractional_str <- as.character(fractional_part)
if (grepl("\\.\\d$", fractional_str)) {
# Case like `.1`: Single digit after decimal -> 1, 2, ..., 9 inches
inches <- fractional_part * 10
} else if (grepl("\\.\\d0$", fractional_str)) {
# Case like `.10`, `.20`, etc.: Two digits ending in `0` -> 10, 20, etc. inches
inches <- fractional_part * 100
} else {
# Case like `.11`, `.12`, etc.: Two digits not ending in `0` -> Exact inches
inches <- fractional_part * 100
}
}
# Validate inches (should be between 0 and 11)
if (inches < 0 || inches > 11.9) {
warning(paste("Invalid height input:", feet_inches, "- Inches must be between 0 and 11.9. Returning NA."))
return(NA) # We have no NAs, so inches were extracted correctly.
}
# Convert inches to feet
inches_in_feet <- inches / 12
# Return total height in feet
return(feet + inches_in_feet)
}
# Apply the conversion function to the 'suspect_height' column
sqf_data$suspect_height_feet <- sapply(sqf_data$suspect_height, convert_to_feet)
# Check the result
tail(sqf_data[, c("suspect_height", "suspect_height_feet")])
sqf_data$suspect_height <- sqf_data$suspect_height_feet
#drop suspect_height_feet
sqf_data <- sqf_data %>% dplyr::select(-suspect_height_feet)
# compute density for suspect_height
height_density <- density(sqf_data$suspect_height, na.rm = TRUE)
# plot the density
plot(height_density,
main = "Density of Height with Outliers Highlighted",
xlab = "Height",
ylab = "Density",
col = "black",
lwd = 2)
grid()
# identify and highlight outliers (e.g., heights below 4 feet and above 7 feet)
outliers <- sqf_data$suspect_height[sqf_data$suspect_height < 4 | sqf_data$suspect_height > 7]
# add vertical lines to mark the outlier boundaries
abline(v = c(4, 7), col = "darkorchid2", lty = 2, lwd = 2)
# highlight the outlier data points on the plot
points(outliers, rep(0, length(outliers)), col = "darkorchid2", pch = 19)
# drop outlier observations where height is above 7 ft and below 4 ft.
sqf_data <- sqf_data[sqf_data$suspect_height >= 4 & sqf_data$suspect_height <= 7, ]
# compute density for reported_age
reported_age_density <- density(sqf_data$suspect_reported_age, na.rm = TRUE)
# plot the density
plot(reported_age_density,
main = "Density of Reported Age with Outliers Highlighted",
xlab = "Reported Age",
ylab = "Density",
col = "black",
lwd = 2)
grid()
# identify and highlight outliers (ages < 10 and > 85)
outliers <- sqf_data$suspect_reported_age[sqf_data$suspect_reported_age < 10 | sqf_data$suspect_reported_age > 85]
# add vertical lines to mark the outlier boundaries
abline(v = c(10, 85), col = "deeppink", lty = 2, lwd = 2)
# highlight the outlier data points on the plot
points(outliers, rep(0, length(outliers)), col = "deeppink", pch = 19)
# drop outlier observations where age is above 85 and below 10.
sqf_data <- sqf_data[sqf_data$suspect_reported_age >= 10 & sqf_data$suspect_reported_age <= 85, ]
mean_age_by_gender <- tapply(sqf_data$suspect_reported_age, sqf_data$suspect_sex, mean)
print(mean_age_by_gender)
#Since the `suspect_reported_age` data is quiet skewed, we will perform a logarithmic transformation.
sqf_data$suspect_reported_age <- log(sqf_data$suspect_reported_age)
